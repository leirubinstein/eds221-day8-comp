---
title: "Day 8 interactive session"
author: "Leilanie Rubinstein"
format: html
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(here)
library(janitor)

install.packages("patchwork")
install.packages("ggrepel")
install.packages("gghighlight")
install.packages("paletteer")
install.packages("ggExtra")
install.packages("ggbeeswarm")
install.packages("gapminder")
install.packages("sf")
```

```{r}
library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(ggExtra)
library(ggbeeswarm)
library(gapminder)
library(sf)
```

# Lizards

```{r}
lizards <- read_csv(here::here("data_tidy", "lizards.csv"), show_col_types = FALSE)
```

```{r}
# ggplot thinks about data visualization in layers

ggplot(data = lizards, aes(x = total_length, y = weight)) + # defining axes
  geom_point() + 
  geom_line()
  
# identical
ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight))

# another way, can change the data and the aesthetics
ggplot() + # anything you pass into ggplot applies to the entire graphic
  geom_point(data = lizards, aes(x = total_length, y = weight))
```

```{r}
# not every data type requires multiple aesthetics
ggplot(data = lizards, aes(x = total_length)) + 
  geom_histogram(binwidth = 10)
```

```{r}
ggplot(data = lizards, aes(y = common_name, x = weight)) +
  geom_jitter()
# + geom_point() will place them all on one line, making things hard to see
```

```{r}
ggplot(data = lizards, aes(x = weight)) + 
  geom_histogram(color = "orange", # outline of the geometry
                 fill = "purple", # what the item itself is color
                 linewidth = 2, # changes thickness of the line
                 linetype = "dotted") # changes line type
```

```{r}
# coolors.co
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point(color = "#FF6392",
             fill = "#420039",
             shape = 22,
             size = 10,
             alpha = 0.5)
```

```{r}
# updating an aesthetic based on a variable
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name,
                 size = total_length),
             alpha = 0.8) +
  scale_color_brewer(palette = "Set3") # color brewer is a set of custom palettes

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name,
                 size = total_length),
             alpha = 1) +
  scale_color_discrete(type = c("503D3F", "615756", "5A786F", "539987", "53CCA0", "53E6AC", "52FFB8")) # need same number of colors as species
```

```{r}
# updating theme
ggplot(data = lizards, aes(x = site, y = weight)) + 
  geom_jitter(aes(color = common_name)) +
  theme_light()
```

```{r}
# Axis labels
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point() +
  labs(x = "Total length (mm)",
       y = "Weight (g)",
       title = "Lizard Size")
# moving or manipulating anything that isn't data happens in `theme_()`
```

```{r}
# Faceting to create multiple panels at once
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_wrap(~common_name, ncol = 3, scales = "free") + # three variables to display: 1) total length, 2) weight, 3) species
  # scales free allows the axes ranges to be different, without it the axes ranges will be the same
  labs(x = "total length (mm)",
       y = "weigh (g)",
       title = "Lizard Sizes")
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_grid(sex ~ tail)
# subsets data based on sex and tail, didn't have to mess with our data
```

```{r}
# ggplot will default to putting things in alphabetical order

lizard_counts <- lizards %>%
  dplyr::count(common_name)

ggplot(data = lizard_counts, aes(y = common_name, x = n)) +
  geom_col()

ggplot(data = lizard_counts, aes(y = fct_reorder(common_name, n), 
                                 x = n)) +
  geom_col()

# keeping data as-is and manipulating data in ggplot is ideal
```

```{r}
# review of basics

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name, shape = common_name), size = 2) +
  theme_light() +
  labs(x = "total length (mm)",
       y = "weight (g)",
       title = "Lizard Sizes",
       color = "lizard species") +
  facet_wrap(~common_name, scales = "free")

# can import png files and use them as symbols!
```

```{r}
ggplot(data = lizards, aes(y = fct_infreq(common_name))) + 
  geom_bar(aes(fill = site)) +
  theme_light() + 
  labs(x = "lizard counts",
       y = "species (common name)") +
  facet_grid(sex ~ tail) + 
  theme_light()

# `geom_bar()` makes the bar size proportional to the counts, `geom_col()` requires an x
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() + 
  # scales the x axis
  scale_x_continuous(breaks = c(0, 250, 500), 
                     limits = c(0, 500)) +
  # scales the y axis
  scale_y_continuous(breaks = seq(from = 0, to = 70, by = 10), 
                     limits = c(0, 70)) +
  theme_light()
```

```{r}
lizard_counts <- lizards %>%
  dplyr::mutate(date = lubridate::mdy(date)) %>%
  dplyr::count(date)

ggplot(data = lizard_counts, aes(x = date, y = n)) + 
  geom_line() +
  # `scale_x_date(breaks = scales::breaks_pretty())` will do it automatically
  scale_x_date(breaks = scales::breaks_width("3 years"),
               labels = scales::label_date("'%y")) +# `label_date("Y")` will give four digit year +
  labs(x = "date",
       y = "number of lizards (n)")
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_gradient(low = "navy", high = "red")

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_gradient(low = c("thistle1", "pink3", "purple", "purple4", "red4"))

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_steps(low = "black", high = "red")

```

```{r}
p <- ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()

p + 
  theme(panel.grid.minor = element_blank(), # removes grid
        panel.grid.major = element_line(color = "red"), # element blank just removes things
        plot.background = element_rect(fill = "pink"),
        text = element_text(size = 12, family = "serif"),
        axis.text.x = element_text(color = "green"),
        axis.text.y = element_text(color = "blue"),
        panel.background = element_rect(color = "purple", fill = "yellow")) 

p
```

```{r}
p + 
  geom_hline(yintercept = 40, color = "blue") + 
  geom_vline(xintercept = 100, color = "red", linetype = "dashed")
  annotate("text", x = 100, y = 50, label = "COOL!", color = "purple") + 
    annotate("text", x = 350, y = mean(lizards$weight) + 2, label = "Mean weight")
    
```

```{r}
mono <- read_csv(here::here("data_tidy", "mono.csv"))

ggplot(data = mono, aes(x = year, y = lake_level)) + 
  geom_rect(aes(xmin = 1941,
                xmax = 1983,
                ymin = 6350,
                ymax = 6440),
            fill = "gray90") +
  labs(x = "year",
       y = "lake surface level\n(feet above sea level)",
       title = "Mono Lake (1850 - 2017)",
       caption = "Data: Mono Basin Clearinghouse") +
  scale_y_continuous(limits = c(6350, 6440),
                     breaks = c(6370, 6400, 6430),
                     labels = scales::label_comma()) +
  scale_x_continuous(limits = c(1850, 2020),
                     expand = c(0,0),
                     breaks = seq(1850, 2010, by = 20)) +
  geom_hline(yintercept = 6360, linetype = "dashed") + 
  annotate("text", x = 1910, y = 6370,
           label = "decreased shrimp abundance expected\n(6360 feet above zero)") +
  annotate("text", x = 1962, y = 6425,
           label = "unrestricted diversions\n(1841-1983)",
           size = 3) +
  theme_light() +
  geom_line()
```

